PROTO worldTile [
      field SFInt32 xPos 0
      field SFInt32 zPos 0
      field SFBool floor FALSE
      field SFInt32 rightWall 0 # divisible by 2 means shortened on north end, divisble by 3 means shortened on south end 
      field SFInt32 bottomWall 0 # divisible by 2 means shortened, divisible by 3 means extended, possible vals 0, 1, 2, 3, 6
	  field SFInt32 topWall 0 
	  field SFInt32 leftWall 0
	  field SFBool topExternal FALSE
	  field SFBool leftExternal FALSE
	  field SFBool rightExternal FALSE
	  field SFBool bottomExternal FALSE
	  field SFBool start FALSE
	  field SFBool trap FALSE
	  field SFBool checkpoint FALSE
	  field SFBool swamp FALSE
	  field SFFloat width 0.0
	  field SFFloat height 0.0
	  field SFString id ""
	  field SFFloat xScale 1.0
	  field SFFloat zScale 1.0
	  field SFFloat yScale 1.0
	 field SFColor tileColor 0 0 0 #Blue: 0.1 0.1 0.9; Purple: 0.3 0.1 0.6; Red: 0.9 0.1 0.1
	 field SFBool isHalf FALSE
	 field SFInt32 curveDir 0
	 field SFInt32 room 0
]
{
      DEF TILE Solid {
	name "solid%{=fields.id.value}%"
	  %{
	  scaleX = fields.xScale.value
	  scaleY = fields.yScale.value
	  scaleZ = fields.zScale.value
	  xStart = -(fields.width.value * (0.3 * scaleX) / 2.0)
	  zStart = -(fields.height.value * (0.3 * scaleZ) / 2.0)
	  x = fields.xPos.value * (0.3 * scaleX) + xStart
	  z = fields.zPos.value * (0.3 * scaleZ) + zStart

	  wallThickness = .025
	  wallHeight = .15
	  tileThickness = .02

	  if fields.isHalf.value == true then -- half tiles are halved in scale, so must double wall thickness to make it match regular
	  	wallThickness = wallThickness * 2
		wallHeight = wallHeight * 2
		tileThickness = tileThickness * 2
      end
	  
	  }%

	  translation %{=x}% 0 %{=z}%
	  scale %{=scaleX}% %{=scaleY}% %{=scaleZ}%
	  contactMaterial "TILE"

      children[
		  DEF TILE_SHAPES_GROUP Group {
			  children [

				%{if fields.floor.value == true then
					x_shift = 0
					z_shift = 0
					x_size = .3
					z_size = .3

					if fields.topExternal.value == true then
						z_shift = z_shift + wallThickness/2/2
						z_size = z_size -wallThickness/2
					end
					if fields.bottomExternal.value == true then
						z_shift = z_shift - wallThickness/2/2
						z_size = z_size -wallThickness/2
					end
					if fields.leftExternal.value == true then
						x_shift = x_shift + wallThickness/2/2
						x_size = x_size -wallThickness/2
					end
					if fields.rightExternal.value == true then
						x_shift = x_shift - wallThickness/2/2
						x_size = x_size -wallThickness/2
					end

				
				}%
					%{if fields.checkpoint.value == false and fields.swamp.value == false and fields.start.value == false then}%
						DEF FLOOR Transform {
							translation %{=x_shift}% -0.085 %{=z_shift}%
							children [
								Shape {
									appearance Appearance {
										material Material {
											diffuseColor IS tileColor
										}
									}
									geometry DEF FLOORBOX Box {
										size %{=x_size}% %{=tileThickness}% %{=z_size}%
									}
									isPickable  FALSE
								}
							]
						}
					%{end}%
					%{if fields.checkpoint.value == true then}%
						DEF CHECKPOINT Transform {
							translation %{=x_shift}% -0.085 %{=z_shift}%
									children [
										Shape {
											appearance CorrodedMetal  {
											}
											geometry Box {
												size %{=x_size}% %{=tileThickness}% %{=z_size}%
											}
											isPickable  FALSE
										}
									]
						}
					%{end}%
					%{if fields.swamp.value == true then}%
						DEF FLOOR Transform {
							translation %{=x_shift}% -0.085 %{=z_shift}%
									children [
										Shape {
											appearance Appearance {
												material Material {
													diffuseColor 0.517647 0.392157 0.192157
												}
											}
											geometry Box {
												size %{=x_size}% %{=tileThickness}% %{=z_size}%
											}
											isPickable  FALSE
										}
									]
						}
					%{end}%
					%{if fields.start.value == true then}%
						DEF START Transform {
							translation %{=x_shift}% -0.085 %{=z_shift}%
									children [
										Shape {
											appearance Appearance {
												material Material {
													diffuseColor 0 0 0
													emissiveColor 0.0313 0.835 0.0313
													shininess 0.8
												}
											}
											geometry Box {
												size %{=x_size}% %{=tileThickness}% %{=z_size}%
											}
											isPickable  FALSE
										}
									]
						}
					%{end}%
				%{end}%
				%{if fields.rightWall.value > 0 then
					z_size = .3
					z_shift = 0
					y_size = wallHeight 
					y_shift = 0

					if fields.rightWall.value % 2 == 0 then
						z_size = z_size - wallThickness/2
						z_shift = z_shift + wallThickness/2/2 
					end 
					if fields.rightWall.value % 3 == 0 then
						z_size = z_size - wallThickness/2
						z_shift = z_shift - wallThickness/2/2 
					end					
					if fields.rightExternal.value == true then
						y_size = wallHeight + tileThickness
						y_shift = -tileThickness/2
					end
				
				}%
					DEF RIGHTWALL Transform {
						translation .15 %{=y_shift}% %{=z_shift}%
						children [
							Shape {
								appearance Appearance {
									material Material {
										diffuseColor 0.2 0.47 0.52
									}
								}
								geometry DEF BACKWALLBOX Box {
								size %{=wallThickness}% %{=y_size}% %{=z_size}%
								}
								isPickable  FALSE
							}
						]
					}
				%{end}%
				%{if fields.bottomWall.value > 0 then
					x_size = .3
					x_shift = 0
					y_size = wallHeight
					y_shift = 0

					if fields.bottomWall.value % 2 == 0 then
						x_size = x_size - wallThickness/2
						x_shift = x_shift + wallThickness/2/2 
					end 
					if fields.bottomWall.value % 3 == 0 then
						x_size = x_size + wallThickness/2
						x_shift = x_shift + wallThickness/2/2 
					end					
					if fields.bottomExternal.value == true then
						y_size = wallHeight + tileThickness
						y_shift = -tileThickness/2
					end
					
					if fields.bottomWall.value % 5 == 0 then
						x_size = x_size + wallThickness/2
						x_shift = x_shift - wallThickness/2/2
					end
				
				}%
					DEF FRONTWALL Transform {
						translation %{=x_shift}% %{=y_shift}% .15
						children [
							Shape {
								appearance Appearance {
									material Material {
										diffuseColor 0.2 0.47 0.52
									}
								}
								geometry DEF BACKWALLBOX Box {
								size %{=x_size}% %{=y_size}% %{=wallThickness}%
								}
								isPickable  FALSE
							}
						]
					}
					%{if fields.rightWall.value > 0 and fields.rightExternal.value == true and fields.bottomExternal.value == false then}%

					Transform {
						translation .15 %{=-wallHeight/2-tileThickness/2}% .15
						children [
								Shape {
									appearance Appearance {
										material Material {
											diffuseColor 0.2 0.466667 0.521569
										}
									}
									geometry DEF BACKWALLBOX Box {
										size %{=wallThickness}% %{=tileThickness}% %{=wallThickness}%
									}
									isPickable  FALSE
								}
							]
					}
					%{end}%
				%{end}%
				%{if fields.topWall.value > 0 then

					x_size = .3
					x_shift = 0
					y_size = wallHeight
					y_shift = 0

					if fields.topWall.value % 2 == 0 then
						x_size = x_size - wallThickness/2
						x_shift = x_shift + wallThickness/2/2 
					end 
					if fields.topWall.value % 3 == 0 then
						x_size = x_size + wallThickness/2
						x_shift = x_shift + wallThickness/2/2 
					end				
					if fields.leftWall.value == 1  or fields.leftWall.value == 3 then --special case for top left corner
						x_size = x_size + wallThickness/2
						x_shift = x_shift - wallThickness/2/2	
					end
					if fields.topExternal.value == true then
						y_size = wallHeight + tileThickness
						y_shift = -tileThickness/2
					end
				}%
					Transform {
						translation %{=x_shift}% %{=y_shift}% -.15
						children [
								Shape {
									appearance Appearance {
										material Material {
											diffuseColor 0.2 0.466667 0.521569
										}
									}
									geometry DEF BACKWALLBOX Box {
										size %{=x_size}% %{=y_size}% %{=wallThickness}%
									}
									isPickable  FALSE
								}
							]
					}
				%{end}%
				%{if fields.leftWall.value > 0 then
				
					z_size = .3
					z_shift = 0
					y_size = wallHeight
					y_shift = 0

					if fields.leftWall.value % 2 == 0 then
						z_size = z_size - wallThickness/2
						z_shift = z_shift + wallThickness/2/2 
					end 
					if fields.leftWall.value % 3 == 0 then
						z_size = z_size + wallThickness/2
						z_shift = z_shift + wallThickness/2/2 
					end					
					if fields.topWall.value == 1 or fields.topWall.value == 3 then --special case for top left corner
						z_size = z_size - wallThickness/2
						z_shift = z_shift + wallThickness/2/2	
					end
					if fields.leftExternal.value == true then
						y_size = wallHeight + tileThickness
						y_shift = -tileThickness/2
					end
				}%
					Transform {
						translation -.15 %{=y_shift}% %{=z_shift}%
						rotation 0 1 0 1.570796
						children [
									Shape {
										appearance Appearance {
											material Material {
												diffuseColor 0.2 0.466667 0.521569
											}
										}
										geometry DEF BACKWALLBOX Box {
											size %{=z_size}% %{=y_size}% %{=wallThickness}%
										}
										isPickable  FALSE
									}
								]
					}
				%{end}%
				%{if fields.trap.value == true then}%

							DEF FLOOR Transform {
								translation 0 -0.205 0
								children [
									Shape {
										appearance Appearance {
											material Material {
												diffuseColor 0.3 0.3 0.3
											}
										}
										geometry DEF FLOORBOX Box {
											size 0.3 0.02 0.3
										}
										isPickable  FALSE
									}
								]
							}
							Transform {
							  translation -2.8549e-07 -0.135 -0.13
							  rotation 0 1 0 -1.5707953071795862
							  children [
								Shape {
								  appearance DEF TRAPAPP Appearance {
									material Material {
									  diffuseColor 0.05 0.05 0.05
									  shininess 0.8
									}
								  }
								  geometry DEF TRAPEDGEBOX Box {
									size 0.04 0.12 0.3
								  }
								  isPickable  FALSE
								}
							  ]
							}
							Transform {
							  translation -2.03924e-08 -0.135 0.13
							  rotation 0 1 0 -1.5707953071795862
							  children [
								Shape {
								  appearance USE TRAPAPP
								  geometry DEF TRAPEDGEBOX Box {
									size 0.04 0.12 0.3
								  }
								  isPickable  FALSE
								}
							  ]
							}
							Transform {
							  translation -0.13 -0.135 2.06647e-15
							  rotation 0 1 0 3.14159
							  children [
								Shape {
								  appearance USE TRAPAPP
								  geometry DEF TRAPEDGEBOX Box {
									size 0.04 0.12 0.3
								  }
								  isPickable  FALSE
								}
							  ]
							}
							Transform {
							  translation 0.13 -0.135 6.89936e-07
							  rotation 0 1 0 3.14159
							  children [
								Shape {
								  appearance USE TRAPAPP
								  geometry DEF TRAPEDGEBOX Box {
									size 0.04 0.12 0.3
								  }
								  isPickable  FALSE
								}
							  ]
							}
				%{end}%
				%{if fields.curveDir.value > 0 then}%
					curvedWall {
						rot %{= fields.curveDir.value}%
						isHalf %{= fields.isHalf.value and "TRUE" or "FALSE"}%
					}
				%{end}%
			  ]
		  }
	        ]
				%{if not(fields.topWall.value == 0) or not(fields.rightWall.value == 0) or not(fields.bottomWall.value==0) or not(fields.leftWall.value==0) or not(fields.floor.value==false) then}%
					boundingObject USE TILE_SHAPES_GROUP
				%{end}%
      }
}
